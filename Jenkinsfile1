#!/usr/bin/env groovy

// ----------------------------------------------------------------------------------
def RELEASE = "DEV";
def PROJECT = "SampleMavenProject";
def JARREF  = "1.0-SNAPSHOT";
def ARTIFACTJAR1 = "amplemaven-";
def RELEASE_NO = "DEV";
def DEPLOYENV = "DEV";
def SUBDIRECTORY = "/AnP";
def CARA_HOSTNAME_URL = "apvrp34109.uhc.com";
def CARA_AGENT_URL = "apvrp34109.uhc.com";

// == pipeline starts from here ...
pipeline {

  agent {
    //label 'APVRD20377'  // agent a linux server
     label 'brx-kubectl-slave'	  
  }

  // Tools sections starts here...
  tools {
    	  maven 'maven1'
	  //maven 'MAVEN 3.6.1 on APVRD20377'
  }
  // == Tools section ends here

  // Environment section starts here -----------------------------------------------------
  environment {
    GIT_CRED_ID     = 'svc_ms_git'
    PROJECT         = 'SampleMavenProject'
    GIT_BRANCH      = 'master'
    EMAIL           = '''saurabh_srivastava41@optum.com'''
    registry        = 'srisaurabh/samplemaven'
    registryCredential = 'saurabh_dockerHub'
    dockerImage = ''
  	  
    //TEST_EMAIL      = 'kshitij_bisen@optum.com'
  }
  // == Environment section ends here ---------------------------------------------------

  // This section is related to Jenkins Job ---------------------------------------------
  options { buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '3') 
      timestamps()
      disableConcurrentBuilds() 
      skipStagesAfterUnstable()
  }
  stages {
    stage('1. General Cleanup') {
        steps { echo '''#####################################'''   
                echo '''########## General Cleanup ##########'''
                echo '''#####################################'''
            script {
                try {
                    cleanWs()
                }
                catch (exc) {
                    echo 'Cleanup WS failed!'
                    currentBuild.result = 'UNSTABLE'
                }
            }
        //echo "currentBuild.currentResult is ${currentBuild.currentResult}"
        }
    }
    stage('2. Source Control Mgmt') {
        when {
            equals expected: "SUCCESS", actual: currentBuild.currentResult
        }
        steps { echo '''#########################################'''
                echo '''########## Source Control Mgmt ##########'''
                echo '''#########################################'''
                //echo "currentBuild.currentResult is ${currentBuild.currentResult}"
            script {
                try {  
                    dir ("$PROJECT") {
                        git branch: "${env.GIT_BRANCH}", credentialsId: 'f9ec78c4-5932-4c26-9288-a96fe695aaa1', url: 'https://github.optum.com/ssriva41/Samplemaven.git'
                    }
                }
                catch (exc) {
                    echo 'Source Mgmt failed!'
                    currentBuild.result = 'UNSTABLE'
                }
            }
        }
    }
  
    stage('3. Build Sample Maven Project') {
        when {
            equals expected: "SUCCESS", actual: currentBuild.currentResult
        }
        steps { echo "#######################################"
                echo "######### Building ${PROJECT} #########"
                echo "#######################################"
            script {
                try {
                    sh '''
		       cd "${WORKSPACE}/${PROJECT}"
		       ls -ltr
                       mvn clean package install
		       ls -ltr
		       cd target
		       ls -ltr
		    '''   
              
                }
                catch (exc) {
                    echo "Build ${PROJECT} failed!"
                    currentBuild.result = 'FAILURE' 
                }
            }
        }
    }
  // Sonar Stage (gl functions) starts from here..----------------------------------------------------
   /*stage ('Sonar') { 
	when {
             equals expected: "SUCCESS", actual: currentBuild.currentResult
       	}
     environment { 
		scannerHome = tool 'Sonar' 
		} 
	        steps { 
		    withSonarQubeEnv('sonar') { 
		    sh ''' 
		    cd "${WORKSPACE}/${PROJECT}" 
		    ${scannerHome}/bin/sonar-scanner 
		    ''' 
			} 
 		} 
	} */
  //  Sonar Stage (gl functions) ends here.-------------------------------------------------------------
	  
	/*  stage('Sonar Scan') {
            steps {
                glSonarMavenScan gitUserCredentialsId: "${GIT_CRED_ID}",
                        sonarMavenPluginVersion: "3.7.0.1746",
                        additionalProps: ['sonar.buildbreaker.skip': "true"]
            }
        } */
  // Artifactory Upload Stage starts from here ---------------------------------------------------
  /* stage ('Artifactory Upload') {
	when {
             equals expected: "SUCCESS", actual: currentBuild.currentResult
       	}
      steps {
        rtBuildInfo (
            captureEnv: true,
        )
        script {
          try {
            rtUpload (
              serverId: '-1381075113@1458159651773',
              spec: """{
                "files": [
                   {
                     "pattern": "/samplemaven-1.0-SNAPSHOT.jar",
                     "target": "UHG-Snapshots/com/optum/optummax/${PROJECT}/${RELEASE}/${BUILD_NUMBER}/",
		              "excludePatterns":  [ 
                                        "*.original" 
                                        ]
                   }
                ]
              }""",
            )
          }
          catch (exc) {
            echo "${PROJECT} Artifactory upload has failed!"
            currentBuild.result = 'FAILURE'
          }
        } //scripts
        rtPublishBuildInfo (
          serverId: '-1381075113@1458159651773', 
        )
	        rtAddInteractivePromotion (
    	    // Mandatory parameters
 
         // Artifactory server ID from Jenkins configuration, or from configuration in the pipeline script
           serverId: '-1381075113@1458159651773',
         
         // Optional parameters
 
         //If set, the promotion window will display this label instead of the build name and number.
           displayName: 'rxc-archive-purge-batch',
         // Name of target repository in Artifactory
           targetRepo: 'UHG-Releases',
         // Comment and Status to be displayed in the Build History tab in Artifactory
         //comment: 'this is the promotion comment',
           status: 'Released',
         // Specifies the source repository for build artifacts.
           sourceRepo: 'UHG-Snapshots',
         // Indicates whether to promote the build dependencies, in addition to the artifacts. False by default.
         //includeDependencies: true,
         // Indicates whether to fail the promotion process in case of failing to move or copy one of the files. False by default
           failFast: true,
         // Indicates whether to copy the files. Move is the default.
           copy: true
        )
      } //steps
    } //stage
  // Artifactory Uplaod Stage Ends here ------------------------------------------------------------------
  */

      stage('Building docker image') {
          steps {
      	    script {
                try {  
                    dir ("${WORKSPACE}/${PROJECT}") {
                        dockerImage = docker.build registry + ":$BUILD_NUMBER"
                    }
		}
                catch (exc) {
                    echo 'Source Mgmt failed!'
                    currentBuild.result = 'UNSTABLE'
                }
            }

          }
      }
	  
      // Pushing image on hub.docker.com starts from here ===============================================================================	 
      /*stage('pushing image to docker hun') {
          steps {
      	    script {
                try {  
                    dir ("${WORKSPACE}/${PROJECT}") {
                    	docker.withRegistry( '', registryCredential ) { 
				dockerImage.push() 
                    	}
		    }
		}
                catch (exc) {
                    echo 'Source Mgmt failed!'
                    currentBuild.result = 'UNSTABLE'
                }
            }

          }
      }	*/
     // Pushing image on hub.docker.com ends here ===============================================================================

      stage('Running container on build image') {
          steps {
      	    script {
                try {  
                    dir ("${WORKSPACE}/${PROJECT}") {
			    // docker container run --name saurabh "${registry} :$BUILD_NUMBER"
			    sh "docker container run --name saurabh $registry:$BUILD_NUMBER" 
                    }
		}
                catch (exc) {
                    echo 'Source Mgmt failed!'
                    currentBuild.result = 'UNSTABLE'
                }
            }

          }
      }
	  
	  
	  
   /*stage('Run RA Deploy') {
	when {
             equals expected: "SUCCESS", actual: currentBuild.currentResult
       	}
      steps {
        script {         
		try {
	//Encrypting the CARA-ARTIFACTORY username & password
	      withCredentials([usernamePassword(credentialsId: '883055ef-fe79-43e6-9388-30e19f18a6cc', passwordVariable: 'PSWD', usernameVariable: 'USERNAME')]) {
				
	//Triggering RA Deployment	
	      runRADeployment addPackage: true, application: 'RXCLAIMBATCHJAVA', artifactVersions: [[artifactDef: 'OS400 JAR', artifactType: 'RxJARFiles', artifactVersion: "${ARTIFACTJAR1}JAR-${DEPLOYENV}-${RELEASE}-${BUILD_NUMBER}", artifactVersionDesc: "${ARTIFACTJAR1}JAR-${DEPLOYENV}-${RELEASE}-${BUILD_NUMBER}", artifactsSource: [httpFilePath: "${ARTIFACTJAR1}${JARREF}.jar", httpPassword: '$PSWD', httpUrl: "https://repo1.uhc.com/artifactory/UHG-Snapshots/com/optum/optummax/${PROJECT}/${RELEASE}/${BUILD_NUMBER}/${ARTIFACTJAR1}${JARREF}.jar", httpUserName: '$USERNAME', sourceType: 'HTTP', svnAllowUnrevisioned: false], retrievalAgents: [agentName: "${CARA_AGENT_URL}", retrieveBy: 'Agents'], storeInRepository: false, validateMD5: false]], build: "${PROJECT},${DEPLOYENV},${RELEASE},${RELEASE_NO},${SUBDIRECTORY},${BUILD_NUMBER},Build", deploymentDesc: "${PROJECT},${DEPLOYENV},${RELEASE},${RELEASE_NO},${SUBDIRECTORY},${BUILD_NUMBER},Build", deploymentName: "${PROJECT},${DEPLOYENV},${RELEASE},${RELEASE_NO},${SUBDIRECTORY},${BUILD_NUMBER},Build", deploymentPlanDesc: "${PROJECT} ${DEPLOYENV} ${RELEASE} ${BUILD_NUMBER} (${DEPLOYENV}-CARA) Build", deploymentPlanName: "${PROJECT} ${DEPLOYENV} ${RELEASE} ${BUILD_NUMBER} (${DEPLOYENV}-CARA) Build", deploymentPlanUsage: 'Create new deployment plan everytime', deploymentProjectName: 'RXCLAIMBATCHJAVA', deploymentStageToRun: 'Full', environments: "RXCBCHJAVA RXDV1 ${DEPLOYENV}", failBuild: false, failedPaused: true, hostName: '', manifestXMLGenerate: false, manifestXMLUpload: false, packageDesc: "${PROJECT} ${DEPLOYENV}-${RELEASE}-${BUILD_NUMBER}", packageName: "${PROJECT} ${DEPLOYENV}-${RELEASE}-${BUILD_NUMBER}", packageXMLGenerate: true, packageXMLUpload: false, port: '8080', pw: '', runAsync: false, showDebug: true, stepParameters: [[parameterName: '', parameterTypes: [parameterType: 'ApplicationType'], parameterValues: [strValue: '', templatePropertyPass: false, templatePropertyStr: false, valueType: 'String'], processName: '', stageName: 'Initialization', stepName: '']], templateCategoryName: 'RXCLAIMBATCHJAVA', templateName: 'RXCLAIMBATCHJAVA QA Deploy', templateProperties: [[propertyName: '', propertyValue: '']], timeout: '-1', updateManifest: false, updateStepParameters: false, updateTemplateProperties: false, uploadManifestXML: '', uploadPackageXML: '', useCentlCrd: true, useSSL: false, user: ''  
                }         // Ending Credential Block
	    }             // Ending Try Block                       
        catch (exc) {
            echo 'RA Deployment Failed!!'
            currentBuild.result = 'FAILURE'
               }        // Ending Catch Block 
            }           // Ending Script Block
        }               // Ending Steps Block
    }                   // Ending Stage Block
    
    
*/
  }                     //stages 
  
  post {
      success {
          sendEmail("Successful")
      }
      unstable {
          sendEmail("Unstable")
      }
      failure {
          sendEmail("Failure")
      }
  }
} //pipeline

def sendEmail(status) {
   emailext (
   to: "$EMAIL", 
   mimeType: 'text/html',
   subject: "Build $BUILD_NUMBER - " + status + " ($JOB_NAME)", 
   body: '''${JELLY_SCRIPT,template="html"}
        ${CHANGES, showPaths=true, format="<div><b>%a</b>: %r %p </div> &#8212; &#8220;<em>%m</em>&#8221;</div>", pathFormat="</div>%p"}'''
   )
}
